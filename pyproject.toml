[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "mlclient"
version = "0.1.0"
description = "A python client managing your MarkLogic instance"
authors = ["Tomasz Anio≈Çowski <tomasz.maciej.aniolowski@gmail.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/monasticus/mlclient"
keywords = ["MarkLogic", "marklogic", "database", "client", "data", "xml", "json", "NoSQL", "nosql"]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3 :: Only",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Topic :: Database",
    "Topic :: Database :: Database Engines/Servers",
    "Topic :: Software Development",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Utilities",
]
packages = [
    { include = "mlclient" }
]

[tool.poetry.dependencies]
python = "^3.8"
requests = "^2.31.0"
python-dateutil = "^2.8.2"

[tool.poetry.group.dev.dependencies]
ruff = "^0.0.281"
isort = "^5.12.0"
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
sphinx = "^7.1.2"
sphinx-rtd-theme = "^1.2.2"

[tool.poetry_bumpversion.file."mlclient/__init__.py"]
[tool.poetry_bumpversion.file."docs/conf.py"]

[tool.pytest.ini_options]
pythonpath = ["."]
addopts = "--strict-markers"
markers = [
    "ml_access" # marks tests requiring an ML access
]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_lines = [
    # Don't complain if non-runnable code isn't run:
    "if __name__ == .__main__.:",
    # Don't complain about abstract methods, they aren't run:
    "raise NotImplementedError$"
]

[tool.isort]
skip_glob=[
    # Disable imports' sorting when the import order is important
    "mlclient/calls/__init__.py"
]

[tool.ruff]
select = [
    "F", "E", "W", "C90", "N", "D", "UP", "B", "A", "COM", "C4", "EM", "EXE", "ISC", "G", "PIE", "T20",
    "PT", "Q", "RSE", "RET", "SLF", "SIM", "ARG", "PTH", "ERA", "PD", "PGH", "PL", "TRY", "RUF", "FLY",
    "ASYNC", "FA", "FIX", "CPY", "PERF"
]
ignore = []
exclude = [
    ".git",
    ".github",
    ".idea",
    ".pytest_cache",
    ".ruff_cache",
    ".venv",
    "__pycache__",
    "dist",
    "venv",
    "meta",
    "docs"
]
ignore-init-module-imports = true
target-version = "py38"

[tool.ruff.pydocstyle]
convention = "numpy"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.per-file-ignores]
"mlclient/ml_client.py" = [
    "A003", # allow shadowing eval builtin for consistency
    "PLR0913" # allow many arguments as they depend on ML REST resource
]
"mlclient/calls/*" = [
    "PLR0913" # allow many arguments as they depend on ML REST resource
]
"mlclient/model/data.py" = [
    "PLR0913" # allow many arguments as they depend on ML structure
]
"tests/*" = [
    "D", # disable pydocstyle for tests
    "EM101", # allow string literals in exceptions' tests
    "PLC1901", # allow comparison to blank string in tests
    "PLR0915", # allow many statements in tests
    "PLR2004", # allow magic values in tests
    "SLF001" # allow private members access in tests
]
